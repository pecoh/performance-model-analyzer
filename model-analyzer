#! /usr/bin/env python3

import argparse
import collections
import json
import math
import random
import sys

def parseArgs():
	"""Define the options of the model-analyzes, parse the command line, and return the options object."""
	optionsParser = argparse.ArgumentParser()
	optionsParser.add_argument('-q', '--quiet', default = False, action = 'store_true', help = "suppress output except for the total time")
	optionsParser.add_argument('-r', '--randomize', dest = 'randomize', action = 'store_true', help = "randomize the order in which the jobs, operations and resources are considered (opposite of --deterministic)")
	optionsParser.add_argument('-d', '--deterministic', dest = 'randomize', action = 'store_false', help = "consider the jobs, operations and resources deterministically (sorted by their respective name, opposite of --randomize)")
	optionsParser.set_defaults(randomize = False)
	optionsParser.add_argument('files', type=argparse.FileType('r'), nargs='+', help="one or more files describing the jobs and machine model")

	return optionsParser.parse_args()

def throws(code) -> bool:
	"""Turn an exception into a boolean.

	code should be some lambda that doesn't take arguments."""
	try:
		code()
		return False
	except:
		return True

def swallowExceptions(code):
	"""Execute possibly throwing code, and either return its result or None."""
	try:
		return code()
	except:
		return None

def div(a: float, b: float) -> float:
	"""Implement correct division without throwing exceptions."""
	try:
		return a/b
	except:
		return a*math.copysign(math.inf, b)

assert div(1e-300, 1e-300) == 1
assert div(1e-300, -1e-300) == -1
assert div(-1e-300, 1e-300) == -1
assert div(-1e-300, -1e-300) == 1
assert div(1, 0) > 1e300
assert div(1, -0.0) < -1e300
assert div(-1, 0) < -1e300
assert div(-1, -0.0) > 1e300
assert math.isnan(div(0, 0))
assert math.isnan(div(0, -0.0))
assert math.isnan(div(-0.0, 0))
assert math.isnan(div(-0.0, -0.0))

def colorFormat(formatStr: str, value: float, thresholds: list, colors: list) -> str:
	"""Format the value into a string and add the appropriate color escape sequence.

	thresholds and colors are synchronous arrays, color[i] is going to be used for all values <= threshold[i]."""
	color = "0"
	for i in range(len(thresholds)):
		color = colors[i]
		if thresholds[i] >= value: break
	return "[" + color + "m" +formatStr%value + "[0m"

def colorPercentage(value: float) -> str:
	"""Wrapper for colorFormat() that highlights 100% red and small values blue.

	value is a number between 0 and 1."""
	return colorFormat("%6.2f%%", 100*value, [10, 80, 99, math.inf], ["36", "0", "33", "91"])

class ResourceObject:
	"""A simple data object that contains the variables throughput, availableThroughput, timeshared, and paths.
	throughput is the capacity of the resource, availableThroughput is the amount of it that is not already committed to a job.
	timeshared has the same meaning as the flag in the data model, and is always present.
	paths is a dictionary of child resources, which may also contain a ".." entry for the parent resource.
	Subresources are only reachable from their parent if they have a multiplicity of 1."""
	def __init__(self, resourceDescription: collections.OrderedDict, parent = None, subresourceName = None):
		self.throughput = swallowExceptions(lambda: resourceDescription["throughput"])
		self.availableThroughput = self.throughput
		self.timeshared = swallowExceptions(lambda: resourceDescription["timeshared"]) or False
		self.paths = collections.OrderedDict()
		if parent:
			self.paths[".."] = parent
			if not swallowExceptions(lambda: resourceDescription["multiplicity"] != 1):
				parent.paths[subresourceName] = self

	def printTree(self, indentation = 0, caller = None):
		"""For debugging purposes, only."""
		print("{")
		indentation += 1
		for name in self.paths:
			print("\t"*indentation + name + ": ", end="")
			if self.paths[name] == caller:
				print("...")
			else:
				self.paths[name].printTree(indentation, self)
		indentation -= 1
		print("\t"*indentation + "}")

class AbstractResource:
	"""A simple data object that provides a means to parse a path to the ResourceObjects.
	Unlike ResourceObject, these do not store throughputs,
	abstract subresources are always reachable from their parent,
	and the timeshared ones provide a list of resourceObjects, which must be filled by the caller."""
	def __init__(self, resourceDescription: collections.OrderedDict, parent = None, subresourceName = None):
		self.timeshared = swallowExceptions(lambda: resourceDescription["timeshared"])
		self.resourceObjects = list()
		self.paths = collections.OrderedDict()
		if parent:
			self.paths[".."] = parent
			parent.paths[subresourceName] = self

	def addConcrete(self, concrete: ResourceObject):
		self.resourceObjects.append(concrete)

	def isTimeshared(self):
		return self.timeshared

	def usageStatistic(self):
		"""Returns a triple with min, mean, and max resource usage expressed as numbers between 0 and 1."""
		minimum, maximum = math.inf, -math.inf
		mean, count = 0, 0
		for concreteResource in self.resourceObjects:
			if not concreteResource.throughput: continue
			curUsage = 1 - concreteResource.availableThroughput/concreteResource.throughput
			minimum = min(minimum, curUsage)
			maximum = max(maximum, curUsage)
			mean, count = (mean*count + curUsage)/(count + 1), count + 1
		return minimum, mean, maximum

	def usageTable(self, table: list, name: str, indentation = 0):
		"""Add a tuple of one string and three numbers to the table for each resource, recursively.

		The order of the tuple fields is this:
		(name: str, min, mean, max)
		
		Don't use this directly, use printUsageTable() on the root resource instead."""
		minimum, mean, maximum = self.usageStatistic()
		table.append(("  "*indentation + " â””â”€ " + name, minimum, mean, maximum))
		for name in self.paths:
			if name == "..": continue
			self.paths[name].usageTable(table, name, indentation + 1)

	def printUsageTable(self, indentationPrefix):
		"""Print a table with the usage statistics of all resources."""
		#Build the table
		table = list()
		for name in self.paths:
			if name == "..": continue
			self.paths[name].usageTable(table, name)

		#Get the size of the name column
		nameTitle = "resource usage"
		nameWidth = len(nameTitle)
		for name, *rest in table:
			nameWidth = max(nameWidth, len(name))

		#Print the table
		titleRow = nameTitle + " "*(nameWidth - len(nameTitle)) + " |   min       mean      max  "
		print(indentationPrefix + titleRow)
		print(indentationPrefix + "-"*len(titleRow))
		for name, minimum, mean, maximum in table:
			print(indentationPrefix + name + " "*(nameWidth - len(name)) + " | ", end="")
			if minimum > 100:
				print()
			else:
				print(colorPercentage(minimum) + "   " + colorPercentage(mean) + "   " + colorPercentage(maximum))

	def printTree(self, indentation = 0):
		"""For debugging purposes, only."""
		print("{")
		indentation += 1
		if hasattr(self, "resourceObjects"):
			print("\t"*indentation + "%d concrete resources: "%len(self.resourceObjects), end="")
			self.resourceObjects[0].printTree(indentation)
		else:
			print("\t"*indentation + "no concrete resources")
		for name in self.paths:
			if name == "..":
				print("\t"*indentation + name)
			else:
				print("\t"*indentation + name + ": ", end="")
				self.paths[name].printTree(indentation)
		indentation -= 1
		print("\t"*indentation + "}")

def resolvePath(root: ResourceObject or AbstractResource, path: list) -> ResourceObject or AbstractResource:
	for i in range(len(path)):
		root = swallowExceptions(lambda: root.paths[path[i]])
	return root

def relativatePath(referencePath: list, absolutePath: list) -> list:
	prefixLength = 0
	suffixLength = len(referencePath)
	for i in range(suffixLength):
		if not swallowExceptions(lambda: referencePath[i] == absolutePath[i]):
			break
		prefixLength += 1
		suffixLength -= 1
	return [".." for i in range(suffixLength)] + absolutePath[prefixLength:]

assert relativatePath(["foo", "bar", "baz"], ["bim"]) == ["..", "..", "..", "bim"]
assert relativatePath(["foo", "bar", "baz"], ["foo", "bim"]) == ["..", "..", "bim"]
assert relativatePath(["foo", "bar", "baz"], ["foo", "bar", "bim"]) == ["..", "bim"]
assert relativatePath(["foo", "bar", "baz"], ["foo", "bar", "baz", "bim"]) == ["bim"]

def makeOrderedDict(unordered: dict, randomize: bool = False) -> collections.OrderedDict:
	"""Turn an unordered dict object into an OrderedDict.

	This can either be done deterministically, sorting the entries by their keys, or entirely randomly."""
	if randomize:
		key = lambda item: random.random()
	else:
		key = lambda item: item[0]
	return collections.OrderedDict(sorted(unordered.items(), key = key))

class Model:
	def __init__(self, randomize: bool, files):
		self.simulatedTime = 0
		self.simulationStep = 0
		self.concreteResources = []

		#read the files
		modelDescription = dict()
		for f in files:
			modelDescription.update(json.load(f))

		#check for completeness
		if throws(lambda: modelDescription["resources"]):
			sys.exit("error: no resources defined")
		if throws(lambda: modelDescription["operations"]):
			sys.exit("error: no job descriptions defined")
		if throws(lambda: modelDescription["jobs"]):
			sys.exit("error: no jobs found")
		self.resources = makeOrderedDict(modelDescription["resources"], randomize)
		self.definitions = makeOrderedDict(modelDescription["operations"], randomize)
		self.jobs = makeOrderedDict(modelDescription["jobs"], randomize)

		#add progress vars to the jobs
		for key in self.jobs:
			self.jobs[key]["progress"] = 0.0
			self.jobs[key]["done"] = False

		#sort the jobs into executable and waiting jobs
		self.classifyJobs()

		#Build the DAG of concrete resource objects, this adds a "resource objects" entry to the timeshared resources,
		#which is an array of resource description dictionaries.
		self.resources = self.createResourceObjects(self.resources, AbstractResource(None), ResourceObject(None))

		#Scan the job descriptions for paths to timeshared resources, and make all other resource paths relative to those.
		#Also, find the maximum resource request.
		self.maxRequest = 0
		for name in self.definitions:
			resourceList = swallowExceptions(lambda: self.definitions[name]["resources"])
			if not resourceList: sys.exit("error: operation '" + name + "' does not require any resources")
			timesharedIndices = [i for i in range(len(resourceList)) if swallowExceptions(lambda: resolvePath(self.resources, resourceList[i]["path"]).isTimeshared())]
			if len(timesharedIndices) != 1:
				print("error: operation '" + name + "' does not name exactly one timeshared resource")
				print("found %d paths to timeshared resources:"%len(timesharedIndices))
				for i in timesharedIndices:
					print("\t" + "/".join(resourceList[i]["path"]))
				sys.exit("exiting due to fatal error")
			timesharedIndex = timesharedIndices[0]

			#Remove the timeshared resource from the list of resources, and make the remaining resource paths relative to the timeshared resource.
			referencePath = resourceList[timesharedIndex]["path"]
			self.definitions[name]["timeshared resource"] = resourceList[timesharedIndex]
			del resourceList[timesharedIndex]
			for i in range(len(resourceList)):
				resourceList[i]["path"] = relativatePath(referencePath, resourceList[i]["path"])
				self.maxRequest = max(self.maxRequest, resourceList[i]["require"])

	def createResourceObjects(self, resources: collections.OrderedDict, abstractParent, concreteParent):
		"""Build a DAG of resource objects, each resource object being a dictionary that contains subresources and/or a parent resource ("..").

		For real resources, the dictionary object also contains a data member `.throughput`.
		For each resource with a multiplicity, several equal resource objects will be created.
		For each timeshared resource, a list of the associated resource objects is created and stored under the key "resource objects"."""
		for name in resources:
			curResource = resources[name]
			multiplicity = swallowExceptions(lambda: curResource["multiplicity"]) or 1
			timeshared = swallowExceptions(lambda: curResource["timeshared"]) or False
			subresources = swallowExceptions(lambda: curResource["resources"]) or None
			isResource = not throws(lambda: curResource["throughput"])

			abstractChild = swallowExceptions(lambda: abstractParent.paths[name])	#don't create abstract resources twice
			if not abstractChild: abstractChild = AbstractResource(curResource, abstractParent, name)

			for i in range(multiplicity):
				concreteChild = ResourceObject(curResource, concreteParent, name)
				abstractChild.addConcrete(concreteChild)
				self.concreteResources.append(concreteChild)
				if subresources:
					self.createResourceObjects(subresources, abstractChild, concreteChild)

		return abstractParent

	def assignResources(self, jobs: collections.OrderedDict, verbosity: int) -> collections.OrderedDict:
		"""For each job, assign a key "speed" which indicates how much progress the job has per second.

		Returns the given dictionary with the updated jobs.
		Current implementation uses a quite daft, naive greedy algorithm."""
		for name in jobs:
			job = jobs[name]
			operationName = job["name"]
			operation = self.definitions[operationName]

			#select an instance of the timeshared resource
			abstractTimesharedResource = resolvePath(self.resources, operation["timeshared resource"]["path"])
			allocationIndex, curThroughput = 0, -1
			for i in range(len(abstractTimesharedResource.resourceObjects)):
				if abstractTimesharedResource.resourceObjects[i].availableThroughput > curThroughput:
					allocationIndex, curThroughput = i, abstractTimesharedResource.resourceObjects[i].availableThroughput
			concreteTimesharedResource = abstractTimesharedResource.resourceObjects[allocationIndex]

			#determine speed of this job
			job["speed"] = div(concreteTimesharedResource.availableThroughput, operation["timeshared resource"]["require"])
			for curRequest in operation["resources"]:
				concreteResource = resolvePath(concreteTimesharedResource, curRequest["path"])
				job["speed"] = min(job["speed"], div(concreteResource.availableThroughput, curRequest["require"]))

			#allocate the resources
			if verbosity >= 1: print("\tjob '" + name + "' (" + operationName + "), speed = %g"%job["speed"])
			concreteTimesharedResource.availableThroughput = 0	#model busy waiting
			for curRequest in operation["resources"]:
				resolvePath(concreteTimesharedResource, curRequest["path"]).availableThroughput -= job["speed"]*curRequest["require"]

			#debug output

		return jobs

	def classifyJobs(self):
		"""Build lists of executable and waiting jobs."""
		self.executableJobs = collections.OrderedDict()
		self.waitingJobs = collections.OrderedDict()
		for key in self.jobs:
			#do not consider jobs that are already done
			if self.jobs[key]["done"]: continue

			#determine if all precondition jobs are done
			isExecutable = True
			if swallowExceptions(lambda: len(self.jobs[key]["require"])):
				for i in range(len(self.jobs[key]["require"])):
					if not self.jobs[self.jobs[key]["require"][i]]["done"]:
						isExecutable = False
						break

			#sort the job into the appropriate class
			if isExecutable:
				self.executableJobs.update({key: self.jobs[key]});
			else:
				self.waitingJobs.update({key: self.jobs[key]});

	def simulateStep(self, verbosity: int):
		self.simulationStep += 1
		if verbosity >= 1:
			print("%gs (step %d):" % (self.simulatedTime, self.simulationStep))
			print()

		#assign resources to the jobs and calculate their momentary speed
		self.assignResources(self.executableJobs, verbosity)
		if verbosity >= 1:
			print()
			self.resources.printUsageTable("\t")
			print()

		#determine how long we the jobs and their speeds will remain the same
		stepTime = math.inf
		for name in self.executableJobs:
			job = self.executableJobs[name]
			jobTime = div(1 - job["progress"], job["speed"])
			stepTime = min(stepTime, jobTime)

		#advance the simulated time
		for name in self.executableJobs:
			job = self.executableJobs[name]
			job["progress"] += stepTime*job["speed"]
			if (1-job["progress"])*self.maxRequest < 1:	#Check whether the job is done with taking float precision errors into account.
				job["progress"] = 1
				job["done"] = True
		self.simulatedTime += stepTime

		#reset the resources and redetermine the sets of executable/waiting jobs
		for resource in self.concreteResources:
			resource.availableThroughput = resource.throughput
		self.classifyJobs()

	def simulate(self, verbosity: int):
		while self.executableJobs:
			self.simulateStep(verbosity)
		print("%gs: done" % self.simulatedTime)

def main():
	options = parseArgs()
	model = Model(options.randomize, options.files)
	verbosity = 1
	if options.quiet: verbosity = 0
	model.simulate(verbosity)

main()
